{
    "Conditions": {
        "Deploy": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "WebAppRevision"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "ECSRegionMap": {
            "eu-west-1": {
                "AMI": "ami-4e6ffe3d"
            },
            "us-east-1": {
                "AMI": "ami-8f7687e2"
            },
            "us-west-1": {
                "AMI": "ami-7f004b1f"
            },
            "us-west-2": {
                "AMI": "ami-84b44de4"
            }
        }
    },
    "Parameters": {
        "ContainerInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "Default": "t2.micro",
            "Description": "The container instance type",
            "Type": "String"
        },
        "MainClusterDesiredScale": {
            "Default": "3",
            "Description": "Desired container instances count",
            "Type": "Number"
        },
        "MainClusterSecretKey": {
            "Description": "Application secret key",
            "Type": "String"
        },
        "MaxScale": {
            "Default": "3",
            "Description": "Maximum container instances count",
            "Type": "Number"
        },
        "NatImageId": {
            "Default": "ami-030f4133",
            "Description": "NAT ImageId",
            "Type": "String"
        },
        "NatInstanceType": {
            "Default": "t1.micro",
            "Description": "NAT InstanceType",
            "Type": "String"
        },
        "NatKeyName": {
            "Description": "NAT KeyName",
            "Type": "String"
        },
        "WebAppRevision": {
            "Default": "",
            "Description": "An optional docker app revision to deploy",
            "Type": "String"
        },
        "WebWorkerCPU": {
            "Default": "512",
            "Description": "Web worker CPU units",
            "Type": "Number"
        },
        "WebWorkerDesiredCount": {
            "Default": "2",
            "Description": "Web worker task instance count",
            "Type": "Number"
        },
        "WebWorkerMemory": {
            "Default": "700",
            "Description": "Web worker memory",
            "Type": "Number"
        },
        "WebWorkerPort": {
            "Default": "8000",
            "Description": "Web worker container exposed port",
            "Type": "Number"
        }
    },
    "Resources": {
        "AutoScalingGroup": {
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "MainClusterDesiredScale"
                },
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "ContainerLaunchConfiguration"
                },
                "MaxSize": {
                    "Ref": "MaxScale"
                },
                "MinSize": {
                    "Ref": "MainClusterDesiredScale"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "ContainerARouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "a"
                        ]
                    ]
                },
                "CidrBlock": "10.0.10.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerBRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "b"
                        ]
                    ]
                },
                "CidrBlock": "10.0.11.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ContainerInstanceRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ContainerInstanceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ecs:*",
                                        "elasticloadbalancing:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ECSManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ecr:GetAuthorizationToken",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "ecr:BatchCheckLayerAvailability"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ECRManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:Create*",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        },
                        "PolicyName": "LoggingPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ContainerLaunchConfiguration": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "register_cluster": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "echo ECS_CLUSTER=",
                                            {
                                                "Ref": "MainCluster"
                                            },
                                            " >> /etc/ecs/ecs.config\n",
                                            "echo 'ECS_AVAILABLE_LOGGING_DRIVERS=",
                                            "[\"json-file\",\"awslogs\"]'",
                                            " >> /etc/ecs/ecs.config\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "template=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reload.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.ContainerLaunchConfiguration.",
                                            "Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource ContainerLaunchConfiguration",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "ContainerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "ECSRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "ContainerInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ContainerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ContainerLaunchConfiguration ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ContainerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Container security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.2.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    },
                    {
                        "CidrIp": "10.0.3.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "GatewayAttachement": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "LoadbalancerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "a"
                        ]
                    ]
                },
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerASubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "LoadbalancerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "b"
                        ]
                    ]
                },
                "CidrBlock": "10.0.3.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerBSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "MainCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "Nat": {
            "Properties": {
                "ImageId": {
                    "Ref": "NatImageId"
                },
                "InstanceType": {
                    "Ref": "NatInstanceType"
                },
                "KeyName": {
                    "Ref": "NatKeyName"
                },
                "SourceDestCheck": "false",
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "NatEIP": {
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "Nat"
                }
            },
            "Type": "AWS::EC2::EIP"
        },
        "PrivateNatRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "Nat"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet": {
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Vpc": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            },
            "Type": "AWS::EC2::VPC"
        },
        "WebLogs": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "RetentionInDays": 365
            },
            "Type": "AWS::Logs::LogGroup"
        }
    }
}
